tags$div(class="sidebar_data",textOutput("king_Latest")),
tags$div(class="sidebar_data",textOutput("muki_Latest")),
tags$div(class="sidebar_data",textOutput("ptdef_Latest")),
hr(),
strong("Notes on Ferry Data:"),
tags$div(class="sidebar_notes",textOutput("FerryBackground")),
br(),
width=3),
mainPanel(
fluidRow(column(4,div(img(src="rp1.jpg", width = "100%", height = "100%", style = "padding-top: 5px"))),
column(4,div(img(src="ferry_terminal.jpg", width = "100%", height = "100%", style = "padding-top: 5px"))),
column(4,div(img(src="fast_ferry_terminal.jpg", width = "100%", height = "100%", style = "padding-top: 5px")))
),
br(),
fluidRow(column(12,plotlyOutput("chart_ferry"))),
fluidRow(br(),column(width = 12, tags$a(class = "source_url", href="https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/ferries/default.htm", "Source: https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/ferries/default.htm")))
) #End of Main Panel
) # End of Sidebar Layout for Ferry
), # End of Ferry Tab Panel
tabPanel(icon("train"),
sidebarLayout(
sidebarPanel(
fluidRow(column(12,div(img(src="AmtrakCascadesLogo.png", width = "75%", height = "75%", style = "padding-top: 5px")))
),
hr(),
strong("Percentage of 2019 Daily Boardings by Operator"),
tags$div(class="sidebar_data",textOutput("rail_Latest")),
hr(),
strong("Notes on Rail Data:"),
tags$div(class="sidebar_notes",textOutput("RailBackground")),
br(),
width=3),
mainPanel(
fluidRow(column(4,div(img(src="seattleamtrak.jpg", width = "100%", height = "100%", style = "padding-top: 5px"))),
column(4,div(img(src="amtrak_2.jpg", width = "100%", height = "100%", style = "padding-top: 5px"))),
column(4,div(img(src="amtrak_3.jpg", width = "75%", height = "75%", style = "padding-top: 5px")))
),
br(),
fluidRow(column(12,plotlyOutput("chart_rail"))),
fluidRow(br(),column(width = 12, tags$a(class = "source_url", href="https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/rail/default.htm", "Source: https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/rail/default.htm")))
) #End of Main Panel
) # End of Sidebar Layout for Rail
), # End of Rail Tab Panel
tabPanel(icon("car"),
sidebarLayout(
sidebarPanel(
div(img(src="wsdot.png", width = "30%", height = "30%", style = "padding-top: 5px")),
hr(),
selectInput("CountLocations","Select the count location:",count_locations),
hr(),
strong("Daily Traffic Volumes:"),
strong("(2019 / 2020 / Ratio)"),
tags$div(class="sidebar_data",textOutput("volumes_March")),
tags$div(class="sidebar_data",textOutput("volumes_April")),
tags$div(class="sidebar_data",textOutput("volumes_May")),
tags$div(class="sidebar_data",textOutput("volumes_Latest")),
hr(),
strong("Notes on Daily Traffic Volumes:"),
br(),
tags$div(class="sidebar_notes",textOutput("VolumeBackground")),
br(),
width=3),
mainPanel(
fluidRow(column(4,div(img(src="i-90mercerisland_1.jpg", width = "100%", height = "100%", style = "padding-top: 25px"))),
column(4,div(img(src="access-ramp_0.jpg", width = "100%", height = "100%", style = "padding-top: 25px"))),
column(4,div(img(src="bremertonmanettebridge.jpg", width = "100%", height = "100%", style = "padding-top: 25px")))
),
br(),
fluidRow(column(12,plotlyOutput("chart_volumes"))),
fluidRow(br(),column(width = 12, tags$a(class = "source_url", href="https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/highway/default.htm", "Source: https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/highway/default.htm")))
) # End of Main Panel of Traffic Volumes
) # End of Sidebar of Traffic Volumes
),# End of Tab Panel of Traffic Volumes
tabPanel(icon("truck"),
sidebarLayout(
sidebarPanel(
div(img(src="wsdot.png", width = "30%", height = "30%", style = "padding-top: 5px")),
hr(),
selectInput("TruckLocations","Select the Truck count location:",truck_count_locations),
hr(),
strong("Percentage of 2019 Daily Truck Volumes"),
tags$div(class="sidebar_data",textOutput("trucks_March")),
tags$div(class="sidebar_data",textOutput("trucks_April")),
tags$div(class="sidebar_data",textOutput("trucks_May")),
tags$div(class="sidebar_data",textOutput("trucks_June")),
tags$div(class="sidebar_data",textOutput("trucks_Latest")),
hr(),
strong("Notes on Daily Truck Volumes:"),
br(),
tags$div(class="sidebar_notes", textOutput("TruckBackground")),
br(),
width=3),
mainPanel(
fluidRow(column(4,div(img(src="autonomous_truck.jpg", width = "100%", height = "100%", style = "padding-top: 25px"))),
column(8,div(img(src="trucks.jpg", width = "75%", height = "75%", style = "padding-top: 25px")))
),
br(),
fluidRow(column(12,plotlyOutput("chart_trucks"))),
fluidRow(br(),column(width = 12, tags$a(class = "source_url", href="https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/freight/default.htm", "Source: https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/freight/default.htm")))
) # End of Main Panel of Truck Volumes
) # End of Sidebar of Truck Volumes
),# End of Tab Panel of Truck Volumes
tabPanel(icon("info-circle"),
h1("Data Sources"),
"The data in this portal comes from a few key sources:",
hr(),
h2("Initial Unemployment Claims "),
"from ESD",
br(),
h2("Airport Passenger Screenings:"),
"from TSA",
br()
)# End of Tab Panel of Information
) # End of NavBar Page
) # End of Shiny App
shinyUI(
navbarPage(title=div(img(src="psrc-logo.png", width = 260, height = 92, style = ("padding-bottom: 30px"))),
windowTitle = "COVID-19 Data Dashboard",
theme = "styles.css",
tabPanel("Overview",
sidebarLayout(
sidebarPanel(
h2("Summary of Impacts:"),
"(compared to same time period in 2019)",
hr(),
tags$div(class="sidebar_headings","Unemployment Claims"),
tags$div(class="sidebar_data",textOutput("unemployment_summary")),
tags$div(class="sidebar_headings","Airport Usage"),
tags$div(class="sidebar_data",textOutput("screenings_summary")),
tags$div(class="sidebar_headings","Transit Usage"),
tags$div(class="sidebar_data",textOutput("transit_summary")),
tags$div(class="sidebar_headings","Ferry Usage"),
tags$div(class="sidebar_data",textOutput("ferry_summary")),
tags$div(class="sidebar_headings","Passsenger Rail Usage"),
tags$div(class="sidebar_data",textOutput("rail_summary")),
tags$div(class="sidebar_headings","Highway Usage"),
tags$div(class="sidebar_data",textOutput("volume_summary")),
br(),
width=3),
mainPanel(
h1("Economic and Travel Impacts of COVID-19"),
fluidRow(column(6,div(img(src="southlakeunionseattle_0.jpg", width = "100%", height = "100%", style = "padding-top: 25px"))),
column(6,div(img(src="bellevuelakewashington_3.jpg", width = "100%", height = "100%", style = "padding-top: 25px")))
),
br(),
"Travel in Washington state has declined significantly since mid-March as the citizens of Washington have responded to various COVID-19 related initiatives such as closing schools, restricting gatherings to fewer than 50 people and the Stay Home - Stay Healthy Executive Order on March 25. This dashboard compiles data from numerous sources daily to help summarize travel and economic impacts for the Central Puge Sound region.",
"Many of the data sources on these pages are updated daily - a direct response from many levels of government to provide timely information on impacts of this pandemic. Data is continually updated by these agencies and as such caution should be used when using the information on these pages as it can change as issues are discovered.",
br(),
br(),
"Many of the travel impacts reported here have been summarized from the amazing data that the Washington State Department of Transportation has gathered and processed from numerous agencies across the state. Each source is documented on the specific dashboard page with a direct link to the data but if you wish to see more detailed information, we recommend that you check out WSDOT's COVID-19 Multimodal Transportation System Performance Dashboard at https://www.wsdot.wa.gov/about/covid-19-transportation-report/",
br(),
) # End of Overview Panel
) # End of Sidebar of Overview Panel
),# End of Tab Panel of Overview Panel
tabPanel(icon("briefcase"),
sidebarLayout(
sidebarPanel(
div(img(src="esd.jpg", width = "50%", height = "50%", style = "padding-top: 5px")),
hr(),
strong("Weekly Initial Jobless Claims:"),
strong("(2019 / 2020 / Ratio)"),
tags$div(class="sidebar_data",textOutput("unemployment_March")),
tags$div(class="sidebar_data",textOutput("unemployment_April")),
tags$div(class="sidebar_data",textOutput("unemployment_May")),
tags$div(class="sidebar_data",textOutput("unemployment_Latest")),
hr(),
strong("Notes on Initial Jobless Claims:"),
br(),
tags$div(class="sidebar_notes",textOutput("esdBackground")),
br(),
width=3),
mainPanel(
fluidRow(column(4,div(img(src="unemployment_1.jpg", width = "75%", height = "75%", style = "padding-top: 25px"))),
column(4,div(img(src="unemployment_2.jpg", width = "85%", height = "85%", style = "padding-top: 25px"))),
column(4,div(img(src="unemployment_3.jpg", width = "100%", height = "100%", style = "padding-top: 25px")))
),
br(),
fluidRow(column(12,plotlyOutput("chart_unemployment"))),
fluidRow(br(),column(width = 12, tags$a(class = "source_url", href="https://esd.wa.gov/newsroom/unemployment-statistics", "Source: https://esd.wa.gov/newsroom/unemployment-statistics")))
) # End of Main Panel of Unemployment
) # End of Sidebar of Unemployment
),# End of Tab Panel of Unemployment
tabPanel(icon("walking"),
sidebarLayout(
sidebarPanel(
div(img(src="wsdot.png", width = "30%", height = "30%", style = "padding-top: 5px")),
hr(),
selectInput("NonMotorLocations","Select the Non-Motorized count location:",nonmotor_count_locations),
hr(),
strong("Percentage of 2019 Non-Motorized Counts"),
tags$div(class="sidebar_data",textOutput("nonmotor_March")),
tags$div(class="sidebar_data",textOutput("nonmotor_April")),
tags$div(class="sidebar_data",textOutput("nonmotor_May")),
tags$div(class="sidebar_data",textOutput("nonmotor_June")),
tags$div(class="sidebar_data",textOutput("nonmotor_Latest")),
hr(),
strong("Notes on Non-Motorized Counts:"),
br(),
tags$div(class="sidebar_notes", textOutput("NonMotorBackground")),
br(),
width=3),
mainPanel(
fluidRow(column(4,div(img(src="bike-walk-bus.jpeg", width = "100%", height = "100%", style = "padding-top: 25px"))),
column(4,div(img(src="biking.jpg", width = "100%", height = "100%", style = "padding-top: 25px"))),
column(4,div(img(src="tokul_trestle.jpg", width = "100%", height = "100%", style = "padding-top: 25px")))
),
br(),
fluidRow(column(12,plotlyOutput("chart_nonmotor"))),
fluidRow(br(),column(width = 12, tags$a(class = "source_url", href="https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/act/default.htm", "Source: https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/act/default.htm")))
) # End of Main Panel of Non-Motorized Volumes
) # End of Sidebar of Non-Motorized Volumes
),# End of Tab Panel of Non-Motorized Volumes
tabPanel(icon("plane-departure"),
sidebarLayout(
sidebarPanel(
div(img(src="tsa_logo.svg", width = 190, height = 67, style = "padding-top: 5px")),
hr(),
strong("Daily Passenger Screenings:"),
strong("(2019 / 2020 / Ratio)"),
tags$div(class="sidebar_data",textOutput("TSA_March")),
tags$div(class="sidebar_data",textOutput("TSA_April")),
tags$div(class="sidebar_data",textOutput("TSA_May")),
tags$div(class="sidebar_data",textOutput("TSA_Latest")),
hr(),
strong("Notes on Screening Data:"),
br(),
tags$div(class="sidebar_notes",textOutput("TSABackground")),
br(),
tags$div(class="sidebar_notes",textOutput("TSABackground2")),
br(),
width=3),
mainPanel(
fluidRow(column(4,div(img(src="seatacterminal.jpg", width = "100%", height = "100%", style = "padding-top: 25px"))),
column(4,div(img(src="alaska-paine-field_0.jpg", width = "100%", height = "100%", style = "padding-top: 25px"))),
column(4,div(img(src="painefieldterminal_int_big.jpg", width = "100%", height = "100%", style = "padding-top: 25px")))
),
br(),
textOutput("TSASummary"),
fluidRow(column(12,plotlyOutput("chart_tsa"))),
fluidRow(br(),column(width = 12, tags$a(class = "source_url", href="https://www.tsa.gov/coronavirus/passenger-throughput", "Source: https://www.tsa.gov/coronavirus/passenger-throughput")))
) # End of Main Panel of Passenger Screening
) # End of Sidebar of Passenger Screening
),# End of Tab Panel of Passenger Screening
tabPanel(icon("bus"),
sidebarLayout(
sidebarPanel(
fluidRow(column(6,div(img(src="community-transit.png", width = "75%", height = "75%", style = "padding-top: 5px"))),
column(6,div(img(src="everett-transit.png", width = "50%", height = "50%", style = "padding-top: 5px")))
),
fluidRow(column(6,div(img(src="pierce-transit.jpg", width = "50%", height = "50%", style = "padding-top: 25px"))),
column(6,div(img(src="kitsap-transit.jpg", width = "50%", height = "50%", style = "padding-top: 25px")))
),
fluidRow(column(6,div(img(src="kc-metro.png", width = "50%", height = "50%", style = "padding-top: 25px"))),
column(6,div(img(src="sound-transit.png", width = "50%", height = "50%", style = "padding-top: 25px")))
),
hr(),
strong("Percentage of 2019 Daily Boardings by Operator"),
tags$div(class="sidebar_data",textOutput("ct_Latest")),
tags$div(class="sidebar_data",textOutput("et_Latest")),
tags$div(class="sidebar_data",textOutput("kcm_Latest")),
tags$div(class="sidebar_data",textOutput("kt_Latest")),
tags$div(class="sidebar_data",textOutput("ktf_Latest")),
tags$div(class="sidebar_data",textOutput("pt_Latest")),
tags$div(class="sidebar_data",textOutput("st_Latest")),
hr(),
strong("Notes on Tranist Data:"),
tags$div(class="sidebar_notes",textOutput("TransitBackground")),
br(),
width=3),
mainPanel(
fluidRow(column(4,div(img(src="bellevuetransitcenter.jpg", width = "100%", height = "100%", style = "padding-top: 5px"))),
column(4,div(img(src="ct.jpg", width = "100%", height = "100%", style = "padding-top: 5px"))),
column(4,div(img(src="link.jpg", width = "100%", height = "100%", style = "padding-top: 5px")))
),
br(),
textOutput("TransitSummary"),
fluidRow(column(12,plotlyOutput("chart_transit"))),
fluidRow(br(),column(width = 12, tags$a(class = "source_url", href="https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/transit/default.htm", "Source: https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/transit/default.htm")))
) #End of Main Panel
) # End of Sidebar Layout for Transit
), # End of Transit Tab Panel
tabPanel(icon("ship"),
sidebarLayout(
sidebarPanel(
fluidRow(column(6,div(img(src="wsf.png", width = "75%", height = "75%", style = "padding-top: 5px"))),
column(6,div(img(src="kitsap-transit.jpg", width = "50%", height = "50%", style = "padding-top: 5px")))
),
hr(),
strong("Percentage of 2019 Daily Boardings by Operator"),
tags$div(class="sidebar_data",textOutput("bi_Latest")),
tags$div(class="sidebar_data",textOutput("brem_Latest")),
tags$div(class="sidebar_data",textOutput("faunt_Latest")),
tags$div(class="sidebar_data",textOutput("king_Latest")),
tags$div(class="sidebar_data",textOutput("muki_Latest")),
tags$div(class="sidebar_data",textOutput("ptdef_Latest")),
hr(),
strong("Notes on Ferry Data:"),
tags$div(class="sidebar_notes",textOutput("FerryBackground")),
br(),
width=3),
mainPanel(
fluidRow(column(4,div(img(src="rp1.jpg", width = "100%", height = "100%", style = "padding-top: 5px"))),
column(4,div(img(src="ferry_terminal.jpg", width = "100%", height = "100%", style = "padding-top: 5px"))),
column(4,div(img(src="fast_ferry_terminal.jpg", width = "100%", height = "100%", style = "padding-top: 5px")))
),
br(),
fluidRow(column(12,plotlyOutput("chart_ferry"))),
fluidRow(br(),column(width = 12, tags$a(class = "source_url", href="https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/ferries/default.htm", "Source: https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/ferries/default.htm")))
) #End of Main Panel
) # End of Sidebar Layout for Ferry
), # End of Ferry Tab Panel
tabPanel(icon("train"),
sidebarLayout(
sidebarPanel(
fluidRow(column(12,div(img(src="AmtrakCascadesLogo.png", width = "75%", height = "75%", style = "padding-top: 5px")))
),
hr(),
strong("Percentage of 2019 Daily Boardings by Operator"),
tags$div(class="sidebar_data",textOutput("rail_Latest")),
hr(),
strong("Notes on Rail Data:"),
tags$div(class="sidebar_notes",textOutput("RailBackground")),
br(),
width=3),
mainPanel(
fluidRow(column(4,div(img(src="seattleamtrak.jpg", width = "100%", height = "100%", style = "padding-top: 5px"))),
column(4,div(img(src="amtrak_2.jpg", width = "100%", height = "100%", style = "padding-top: 5px"))),
column(4,div(img(src="amtrak_3.jpg", width = "75%", height = "75%", style = "padding-top: 5px")))
),
br(),
fluidRow(column(12,plotlyOutput("chart_rail"))),
fluidRow(br(),column(width = 12, tags$a(class = "source_url", href="https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/rail/default.htm", "Source: https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/rail/default.htm")))
) #End of Main Panel
) # End of Sidebar Layout for Rail
), # End of Rail Tab Panel
tabPanel(icon("car"),
sidebarLayout(
sidebarPanel(
div(img(src="wsdot.png", width = "30%", height = "30%", style = "padding-top: 5px")),
hr(),
selectInput("CountLocations","Select the count location:",count_locations),
hr(),
strong("Daily Traffic Volumes:"),
strong("(2019 / 2020 / Ratio)"),
tags$div(class="sidebar_data",textOutput("volumes_March")),
tags$div(class="sidebar_data",textOutput("volumes_April")),
tags$div(class="sidebar_data",textOutput("volumes_May")),
tags$div(class="sidebar_data",textOutput("volumes_Latest")),
hr(),
strong("Notes on Daily Traffic Volumes:"),
br(),
tags$div(class="sidebar_notes",textOutput("VolumeBackground")),
br(),
width=3),
mainPanel(
fluidRow(column(4,div(img(src="i-90mercerisland_1.jpg", width = "100%", height = "100%", style = "padding-top: 25px"))),
column(4,div(img(src="access-ramp_0.jpg", width = "100%", height = "100%", style = "padding-top: 25px"))),
column(4,div(img(src="bremertonmanettebridge.jpg", width = "100%", height = "100%", style = "padding-top: 25px")))
),
br(),
fluidRow(column(12,plotlyOutput("chart_volumes"))),
fluidRow(br(),column(width = 12, tags$a(class = "source_url", href="https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/highway/default.htm", "Source: https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/highway/default.htm")))
) # End of Main Panel of Traffic Volumes
) # End of Sidebar of Traffic Volumes
),# End of Tab Panel of Traffic Volumes
tabPanel(icon("truck"),
sidebarLayout(
sidebarPanel(
div(img(src="wsdot.png", width = "30%", height = "30%", style = "padding-top: 5px")),
hr(),
selectInput("TruckLocations","Select the Truck count location:",truck_count_locations),
hr(),
strong("Percentage of 2019 Daily Truck Volumes"),
tags$div(class="sidebar_data",textOutput("trucks_March")),
tags$div(class="sidebar_data",textOutput("trucks_April")),
tags$div(class="sidebar_data",textOutput("trucks_May")),
tags$div(class="sidebar_data",textOutput("trucks_June")),
tags$div(class="sidebar_data",textOutput("trucks_Latest")),
hr(),
strong("Notes on Daily Truck Volumes:"),
br(),
tags$div(class="sidebar_notes", textOutput("TruckBackground")),
br(),
width=3),
mainPanel(
fluidRow(column(4,div(img(src="autonomous_truck.jpg", width = "100%", height = "100%", style = "padding-top: 25px"))),
column(8,div(img(src="trucks.jpg", width = "75%", height = "75%", style = "padding-top: 25px")))
),
br(),
fluidRow(column(12,plotlyOutput("chart_trucks"))),
fluidRow(br(),column(width = 12, tags$a(class = "source_url", href="https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/freight/default.htm", "Source: https://www.wsdot.wa.gov/about/covid-19-transportation-report/dashboard/freight/default.htm")))
) # End of Main Panel of Truck Volumes
) # End of Sidebar of Truck Volumes
),# End of Tab Panel of Truck Volumes
tabPanel(icon("info-circle"),
h1("Data Sources"),
"The data in this portal comes from a few key sources:",
hr(),
h2("Initial Unemployment Claims "),
"from ESD",
br(),
h2("Airport Passenger Screenings:"),
"from TSA",
br()
)# End of Tab Panel of Information
) # End of NavBar Page
) # End of Shiny App
install.packages("shiny")
runApp('~/GitHub/covid19-dashboard/shiny')
install.packages("shiny")
library(shiny)
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
# headings
output$airtravel_heading <- renderText({
paste("Daily Passenger Screenings at our Nation's Airports")
})
output$TSASummary <- renderText({
paste("Daily passenger screenings by the Transportation Security Adminstration have ranged from a maximum of ", format(round(max_tsa,-2), nsmall = 0, big.mark = ",")," to a minimum of ",format(round(min_tsa,-2), nsmall = 0, big.mark = ","), " since March 1st. At it's lowest point on April 14th, daily passenger screenings in 2020 were only ", round((return_estimate(passengers,"2020-04-14")/return_estimate(passengers,"2019-04-14"))*100,1),"% of the total passenger screenings from 2019. Passenger volumes at our nation's airports have been gradually increasing since late April and as of ",latest_month,"-",latest_day," passsenger screenings were ", round((return_estimate(passengers,ydm(paste("2020-",latest_day,"-",latest_month)))/return_estimate(passengers,ydm(paste("2019-",latest_day,"-",latest_month))))*100,1),"% of 2019 screenings.")
})
output$TSABackground <- renderText({
paste("TSA understands that the novel coronavirus (COVID-19) continues to weigh heavily on the minds of travelers and the general public. They have established a webpage to provide resources and information to assist passengers who find they must travel during this challenging time. For the latest press releases and statements related to COVID-19, please visit their website at https://www.tsa.gov/coronavirus.")
})
output$TSABackground2 <- renderText({
paste("To help provide relevant information about the impact of COVID-19 on air travel, the TSA provides daily updates at 9am EDT of passenger screenings from the previous day with a comparison to to same weekday in 2019.")
})
output$esdBackground <- renderText({
paste("Initial unemployment claims are reported for each week based on the last day of the work week and are generally available early in the next week. Due to the high volume of claims and issues of fraud, over 20,000 calls are going into their phone center each day and wait times are very long, making it difficult for people to reach ESD at this time.")
})
output$TransitBackground <- renderText({
paste("This data is provided to the Washington State Department of Transportation by regional transit agencies. Transit agencies that do not offer weekend service will show these days as gaps in their data. Normal is average daily ridership for the same day of week in the same month of the prior year - 2019. In order to meet the unprecedented need for near-real time information, almost no quality control is occurring relative to this data. Use with caution.")
})
output$FerryBackground <- renderText({
paste("This data is provided by Washington State Department of Transportation Ferries division. Normal is average daily ridership for the same day of week in the same month of the prior year - 2019. In order to meet the unprecedented need for near-real time information, almost no quality control is occurring relative to this data. Use with caution.")
})
output$RailBackground <- renderText({
paste("This data is provided by Washington State Department of Transportation. Normal is average daily ridership for the same day of week in the same month of the prior year - 2019. In order to meet the unprecedented need for near-real time information, almost no quality control is occurring relative to this data. Use with caution.")
})
output$VolumeBackground <- renderText({
paste("This data is provided by Washington State Department of Transportation. Normal is average daily traffic for the same day of week in the same month of the prior year - 2019. In order to meet the unprecedented need for near-real time information, almost no quality control is occurring relative to this data. Use with caution.")
})
output$TruckBackground <- renderText({
paste("This data is provided by Washington State Department of Transportation. Normal is average daily traffic for the same day of week in the same month of the prior year - 2019. In order to meet the unprecedented need for near-real time information, almost no quality control is occurring relative to this data. Use with caution.")
})
output$NonMotorBackground <- renderText({
paste("This data is provided by Washington State Department of Transportation. Normal is the average for the same day of week in the same month of the prior year - 2019. In order to meet the unprecedented need for near-real time information, almost no quality control is occurring relative to this data. Use with caution.")
})
output$TransitSummary <- renderText({
paste("Daily weekday transit boardings continue to be less than half of the daily transit boardings from 2019 for all operators in the region. One interesting item to note is that weekend boarding levels have averaged closer to 2019 levels than weekdays, likely reflecting the higher percentage of non-work transit trips that occur on weekends.")
})
# TSA Data
output$chart_tsa <- renderPlotly({create_line_chart(passengers,"Daily Passenger Screenings",scales::comma, 0, c('#91268F','#F05A28'),"year",1,"")})
output$TSA_March <- renderText({paste("March 1st: ", format(round(return_estimate(passengers,"2019-03-01"),-2), nsmall = 0, big.mark = ","), "/", format(round(return_estimate(passengers,"2020-03-01"),-2), nsmall = 0, big.mark = ","), "/", round((return_estimate(passengers,"2020-03-01")/return_estimate(passengers,"2019-03-01"))*100,1),"%")})
output$TSA_April <- renderText({paste("April 1st: ", format(round(return_estimate(passengers,"2019-04-01"),-2), nsmall = 0, big.mark = ","), "/", format(round(return_estimate(passengers,"2020-04-01"),-2), nsmall = 0, big.mark = ","), "/", round((return_estimate(passengers,"2020-04-01")/return_estimate(passengers,"2019-04-01"))*100,1),"%")})
output$TSA_May <- renderText({paste("May 1st: ", format(round(return_estimate(passengers,"2019-05-01"),-2), nsmall = 0, big.mark = ","), "/", format(round(return_estimate(passengers,"2020-05-01"),-2), nsmall = 0, big.mark = ","), "/", round((return_estimate(passengers,"2020-05-01")/return_estimate(passengers,"2019-05-01"))*100,1),"%")})
output$TSA_Latest <- renderText({paste("Latest Data (",latest_month,"-",latest_day,"): ", format(round(return_estimate(passengers,ydm(paste("2019-",latest_day,"-",latest_month))),-2), nsmall = 0, big.mark = ","), "/", format(round(return_estimate(passengers,ydm(paste("2020-",latest_day,"-",latest_month))),-2), nsmall = 0, big.mark = ","), "/", round((return_estimate(passengers,ydm(paste("2020-",latest_day,"-",latest_month)))/return_estimate(passengers,ydm(paste("2019-",latest_day,"-",latest_month))))*100,1),"%")})
# Tranit Data
output$chart_transit <- renderPlotly({create_line_chart(transit, "% of 2019 Daily Boardings", scales::percent, 1, c('#91268F','#F05A28',"#8CC63E","#00A7A0","#00A7A0","#76787A","#BBBDC0"), "variable",100,"%")})
output$ct_Latest <- renderText({paste("Community Transit (",ct_latest_month,"-",ct_latest_day,"): ", format(round(return_single_estimate(transit,ydm(paste("2020-",ct_latest_day,"-",ct_latest_month)),"Community Transit"),1), nsmall = 0, big.mark = ","),"%")})
output$et_Latest <- renderText({paste("Everett Transit (",et_latest_month,"-",et_latest_day,"): ", format(round(return_single_estimate(transit,ydm(paste("2020-",et_latest_day,"-",et_latest_month)),"Everett Transit"),1), nsmall = 0, big.mark = ","),"%")})
output$kcm_Latest <- renderText({paste("King County Metro (",kcm_latest_month,"-",kcm_latest_day,"): ", format(round(return_single_estimate(transit,ydm(paste("2020-",kcm_latest_day,"-",kcm_latest_month)),"King County Metro"),1), nsmall = 0, big.mark = ","),"%")})
output$kt_Latest <- renderText({paste("Kitsap Transit (",kt_latest_month,"-",kt_latest_day,"): ", format(round(return_single_estimate(transit,ydm(paste("2020-",kt_latest_day,"-",kt_latest_month)),"Kitsap Transit"),1), nsmall = 0, big.mark = ","),"%")})
output$ktf_Latest <- renderText({paste("Kitsap Fast Ferry (",ktf_latest_month,"-",ktf_latest_day,"): ", format(round(return_single_estimate(transit,ydm(paste("2020-",ktf_latest_day,"-",ktf_latest_month)),"Kitsap Fast Ferry"),1), nsmall = 0, big.mark = ","),"%")})
output$pt_Latest <- renderText({paste("Pierce Transit (",pt_latest_month,"-",pt_latest_day,"): ", format(round(return_single_estimate(transit,ydm(paste("2020-",pt_latest_day,"-",pt_latest_month)),"Pierce Transit"),1), nsmall = 0, big.mark = ","),"%")})
output$st_Latest <- renderText({paste("Sound Transit (",st_latest_month,"-",st_latest_day,"): ", format(round(return_single_estimate(transit,ydm(paste("2020-",st_latest_day,"-",st_latest_month)),"Sound Transit"),1), nsmall = 0, big.mark = ","),"%")})
# Ferry Data
output$chart_ferry <- renderPlotly({create_line_chart(ferry, "% of 2019 Daily Passengers", scales::percent, 1, c('#91268F','#F05A28',"#8CC63E","#00A7A0","#76787A","#BBBDC0"), "variable",100,"%")})
output$bi_Latest <- renderText({paste("Bainbridge Island (",ferry_latest_month,"-",ferry_latest_day,"): ", format(round(return_single_estimate(ferry,ydm(paste("2020-",ferry_latest_day,"-",ferry_latest_month)),"Seattle - Bainbridge Island"),1), nsmall = 0, big.mark = ","),"%")})
output$brem_Latest <- renderText({paste("Bremerton (",ferry_latest_month,"-",ferry_latest_day,"): ", format(round(return_single_estimate(ferry,ydm(paste("2020-",ferry_latest_day,"-",ferry_latest_month)),"Seattle - Bremerton"),1), nsmall = 0, big.mark = ","),"%")})
output$faunt_Latest <- renderText({paste("Fauntleroy (",ferry_latest_month,"-",ferry_latest_day,"): ", format(round(return_single_estimate(ferry,ydm(paste("2020-",ferry_latest_day,"-",ferry_latest_month)),"Fauntleroy - Vashon - Southworth"),1), nsmall = 0, big.mark = ","),"%")})
output$king_Latest <- renderText({paste("Edmonds (",ferry_latest_month,"-",ferry_latest_day,"): ", format(round(return_single_estimate(ferry,ydm(paste("2020-",ferry_latest_day,"-",ferry_latest_month)),"Edmonds -  Kingston"),1), nsmall = 0, big.mark = ","),"%")})
output$muki_Latest <- renderText({paste("Mukilteo (",ferry_latest_month,"-",ferry_latest_day,"): ", format(round(return_single_estimate(ferry,ydm(paste("2020-",ferry_latest_day,"-",ferry_latest_month)),"Mukilteo - Clinton"),1), nsmall = 0, big.mark = ","),"%")})
output$ptdef_Latest <- renderText({paste("Pt Defiance (",ferry_latest_month,"-",ferry_latest_day,"): ", format(round(return_single_estimate(ferry,ydm(paste("2020-",ferry_latest_day,"-",ferry_latest_month)),"Point Defiance - Tahlequah"),1), nsmall = 0, big.mark = ","),"%")})
# Rail Data
output$chart_rail <- renderPlotly({create_line_chart(rail, "% of 2019 Daily Passengers", scales::percent, 1, c('#91268F','#F05A28',"#8CC63E","#00A7A0","#76787A","#BBBDC0"), "variable",100,"%")})
output$rail_Latest <- renderText({paste("Amtrak Cascades (",rail_latest_month,"-",rail_latest_day,"): ", format(round(return_single_estimate(rail,ydm(paste("2020-",rail_latest_day,"-",rail_latest_month)),"Amtrak"),1), nsmall = 0, big.mark = ","),"%")})
# Unemployment Data
output$chart_unemployment <- renderPlotly({create_line_chart(unemployment,"Initial Claims",scales::comma, 0, c('#91268F','#F05A28'),"year",1,"")})
output$unemployment_March <- renderText({paste("1st week of March: ", format(round(return_estimate(unemployment,"2019-03-02"),-2), nsmall = 0, big.mark = ","), "/", format(round(return_estimate(unemployment,"2020-02-29"),-2), nsmall = 0, big.mark = ","), "/", round((return_estimate(unemployment,"2020-02-29")/return_estimate(unemployment,"2019-03-02"))*100,1),"%")})
output$unemployment_April <- renderText({paste("1st week of April: ", format(round(return_estimate(unemployment,"2019-03-30"),-2), nsmall = 0, big.mark = ","), "/", format(round(return_estimate(unemployment,"2020-03-28"),-2), nsmall = 0, big.mark = ","), "/", round((return_estimate(unemployment,"2020-03-28")/return_estimate(unemployment,"2019-03-30"))*100,1),"%")})
output$unemployment_May <- renderText({paste("1st week of May: ", format(round(return_estimate(unemployment,"2019-04-27"),-2), nsmall = 0, big.mark = ","), "/", format(round(return_estimate(unemployment,"2020-05-02"),-2), nsmall = 0, big.mark = ","), "/", round((return_estimate(unemployment,"2020-05-02")/return_estimate(unemployment,"2019-04-27"))*100,1),"%")})
output$unemployment_Latest <- renderText({paste("Latest Data (",esd_latest_month_current,"-",esd_latest_day_current,"): ", format(round(return_estimate(unemployment,ydm(paste("2019-",esd_latest_day_prior,"-",esd_latest_month_prior))),-2), nsmall = 0, big.mark = ","), "/", format(round(return_estimate(unemployment,ydm(paste("2020-",esd_latest_day_current,"-",esd_latest_month_current))),-2), nsmall = 0, big.mark = ","), "/", round((return_estimate(unemployment,ydm(paste("2020-",esd_latest_day_current,"-",esd_latest_month_current)))/return_estimate(unemployment,ydm(paste("2019-",esd_latest_day_prior,"-",esd_latest_month_prior))))*100,1),"%")})
# Traffic Data
output$chart_volumes <- renderPlotly({create_line_chart(w_tbl=volumes[Location %in% input$CountLocations],"Daily Traffic",scales::comma, 0, c('#91268F','#F05A28'),"year",1,"")})
output$volumes_March <- renderText({paste("March 1st: ", format(round(return_matching_day(w_tbl=volumes[Location %in% input$CountLocations],w_day="2020-03-01",w_year=2019),-2), nsmall = 0, big.mark = ","), "/", format(round(return_matching_day(w_tbl=volumes[Location %in% input$CountLocations],w_day="2020-03-01",w_year=2020),-2), nsmall = 0, big.mark = ","), "/", round((return_matching_day(w_tbl=volumes[Location %in% input$CountLocations],w_day="2020-03-01",w_year=2020)/return_matching_day(w_tbl=volumes[Location %in% input$CountLocations],w_day="2020-03-01",w_year=2019))*100,1),"%")})
output$volumes_April <- renderText({paste("April 1st: ", format(round(return_matching_day(w_tbl=volumes[Location %in% input$CountLocations],w_day="2020-04-01",w_year=2019),-2), nsmall = 0, big.mark = ","), "/", format(round(return_matching_day(w_tbl=volumes[Location %in% input$CountLocations],w_day="2020-04-01",w_year=2020),-2), nsmall = 0, big.mark = ","), "/", round((return_matching_day(w_tbl=volumes[Location %in% input$CountLocations],w_day="2020-04-01",w_year=2020)/return_matching_day(w_tbl=volumes[Location %in% input$CountLocations],w_day="2020-04-01",w_year=2019))*100,1),"%")})
output$volumes_May <- renderText({paste("May 1st: ", format(round(return_matching_day(w_tbl=volumes[Location %in% input$CountLocations],w_day="2020-05-01",w_year=2019),-2), nsmall = 0, big.mark = ","), "/", format(round(return_matching_day(w_tbl=volumes[Location %in% input$CountLocations],w_day="2020-05-01",w_year=2020),-2), nsmall = 0, big.mark = ","), "/", round((return_matching_day(w_tbl=volumes[Location %in% input$CountLocations],w_day="2020-05-01",w_year=2020)/return_matching_day(w_tbl=volumes[Location %in% input$CountLocations],w_day="2020-05-01",w_year=2019))*100,1),"%")})
output$volumes_Latest <- renderText({paste("Latest Data (",volumes_latest_month,"-",volumes_latest_day,"): ", format(round(return_matching_day(w_tbl=volumes[Location %in% input$CountLocations],w_day=ydm(paste("2020-",volumes_latest_day,"-",volumes_latest_month)),w_year=2019),-2), nsmall = 0, big.mark = ","), "/", format(round(return_matching_day(w_tbl=volumes[Location %in% input$CountLocations],w_day=ydm(paste("2020-",volumes_latest_day,"-",volumes_latest_month)),w_year=2020),-2), nsmall = 0, big.mark = ","), "/", round((return_matching_day(w_tbl=volumes[Location %in% input$CountLocations],w_day=ydm(paste("2020-",volumes_latest_day,"-",volumes_latest_month)),w_year=2020)/return_matching_day(w_tbl=volumes[Location %in% input$CountLocations],w_day=ydm(paste("2020-",volumes_latest_day,"-",volumes_latest_month)),w_year=2019))*100,1),"%")})
# Truck Data
output$chart_trucks <- renderPlotly({create_line_chart(w_tbl=trucks[Location %in% input$TruckLocations],"% of 2019 Daily Truck Traffic",scales::percent, 1, c('#91268F','#F05A28'),"year",100,"%")})
output$trucks_March <- renderText({paste("March 1st: ", format(round(return_matching_day(w_tbl=trucks[Location %in% input$TruckLocations],"2020-03-01",2020),2)*100, nsmall = 0, big.mark = ","),"%")})
output$trucks_April <- renderText({paste("April 1st: ", format(round(return_matching_day(w_tbl=trucks[Location %in% input$TruckLocations],"2020-04-01",2020),2)*100, nsmall = 0, big.mark = ","),"%")})
output$trucks_May <- renderText({paste("May 1st: ", format(round(return_matching_day(w_tbl=trucks[Location %in% input$TruckLocations],"2020-05-01",2020),2)*100, nsmall = 0, big.mark = ","),"%")})
output$trucks_June <- renderText({paste("June 1st: ", format(round(return_matching_day(w_tbl=trucks[Location %in% input$TruckLocations],"2020-06-01",2020),2)*100, nsmall = 0, big.mark = ","),"%")})
output$trucks_Latest <- renderText({paste("Latest Data (",trucks_latest_month,"-",trucks_latest_day,"): ", format(round(return_matching_day(w_tbl=trucks[Location %in% input$TruckLocations],w_day=ydm(paste("2020-",trucks_latest_day,"-",trucks_latest_month)),2020),2)*100, nsmall = 0, big.mark = ","),"%")})
# Non-Motorized Data
output$chart_nonmotor <- renderPlotly({create_line_chart(w_tbl=nonmotor[Location %in% input$NonMotorLocations],"% of 2019 Daily Non-Motorized Counts",scales::percent, 1, c('#91268F','#F05A28'),"year",100,"%")})
output$nonmotor_March <- renderText({paste("March 1st: ", format(round(return_matching_day(w_tbl=nonmotor[Location %in% input$NonMotorLocations],"2020-03-01",2020),2)*100, nsmall = 0, big.mark = ","),"%")})
output$nonmotor_April <- renderText({paste("April 1st: ", format(round(return_matching_day(w_tbl=nonmotor[Location %in% input$NonMotorLocations],"2020-04-01",2020),2)*100, nsmall = 0, big.mark = ","),"%")})
output$nonmotor_May <- renderText({paste("May 1st: ", format(round(return_matching_day(w_tbl=nonmotor[Location %in% input$NonMotorLocations],"2020-05-01",2020),2)*100, nsmall = 0, big.mark = ","),"%")})
output$nonmotor_June <- renderText({paste("June 1st: ", format(round(return_matching_day(w_tbl=nonmotor[Location %in% input$NonMotorLocations],"2020-06-01",2020),2)*100, nsmall = 0, big.mark = ","),"%")})
output$nonmotor_Latest <- renderText({paste("Latest Data (",nonmotor_latest_month,"-",nonmotor_latest_day,"): ", format(round(return_matching_day(w_tbl=nonmotor[Location %in% input$NonMotorLocations],w_day=ydm(paste("2020-",nonmotor_latest_day,"-",nonmotor_latest_month)),2020),2)*100, nsmall = 0, big.mark = ","),"%")})
# Summary Statistics for Initial Page
output$screenings_summary <- renderText({paste("Nationwide Airport Screenings: ", round((return_estimate(passengers,ydm(paste("2020-",latest_day,"-",latest_month)))/return_estimate(passengers,ydm(paste("2019-",latest_day,"-",latest_month))))*100,0)-100,"%")})
output$unemployment_summary <- renderText({paste("Initial Jobless Claims Statewide: ", round((return_estimate(unemployment,ydm(paste("2020-",esd_latest_day_current,"-",esd_latest_month_current)))/return_estimate(unemployment,ydm(paste("2019-",esd_latest_day_prior,"-",esd_latest_month_prior))))*100,0),"%")})
output$transit_summary <- renderText({paste("Major Transit Operators Statewide: ", format(round(return_single_estimate(transit_data,ydm(paste("2020-",all_tran_latest_day,"-",all_tran_latest_month)),"Average"),1), nsmall = 0, big.mark = ","),"%")})
output$rail_summary <- renderText({paste("Amtrak Cascades: ", format(round(return_single_estimate(rail,ydm(paste("2020-",rail_latest_day,"-",rail_latest_month)),"Amtrak"),1), nsmall = 0, big.mark = ","),"%")})
output$ferry_summary <- renderText({paste("Central Puget Sound Ferry Routes: ", format(round((round(return_single_estimate(ferry_ridership_2020,ydm(paste("2020-",ferry_latest_day,"-",ferry_latest_month)),psrc_ferry),0) - round(return_single_estimate(ferry_ridership_2019,ydm(paste("2020-",ferry_latest_day,"-",ferry_latest_month)),psrc_ferry),0))/ round(return_single_estimate(ferry_ridership_2019,ydm(paste("2020-",ferry_latest_day,"-",ferry_latest_month)),psrc_ferry),0)*100,0), nsmall = 0, big.mark = ","),"%")})
output$volume_summary <- renderText({paste("Central Puget Sound Highways: ", format(round(((round(return_matching_day(w_tbl=volumes[Location %in% count_locations],w_day=ydm(paste("2020-",volumes_latest_day,"-",volumes_latest_month)),w_year=2020),-2)-round(return_matching_day(w_tbl=volumes[Location %in% count_locations],w_day=ydm(paste("2020-",volumes_latest_day,"-",volumes_latest_month)),w_year=2019),-2))/round(return_matching_day(w_tbl=volumes[Location %in% count_locations],w_day=ydm(paste("2020-",volumes_latest_day,"-",volumes_latest_month)),w_year=2019),-2))*100,0), nsmall = 0, big.mark = ","),"%")})
})
shinyApp(ui = ui, server = server)
